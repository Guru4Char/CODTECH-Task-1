task one:
Verilog Code for 4-bit Ripple Carry Adder:
module FullAdder (
    input a,
    input b,
    input cin,
    output sum,
    output cout
);
    assign {cout, sum} = a + b + cin;
endmodule

module RippleCarryAdder4 (
    input [3:0] a,
    input [3:0] b,
    input cin,
    output [3:0] sum,
    output cout
);
    wire c1, c2, c3;
    
    FullAdder fa0 (.a(a[0]), .b(b[0]), .cin(cin),  .sum(sum[0]), .cout(c1));
    FullAdder fa1 (.a(a[1]), .b(b[1]), .cin(c1),  .sum(sum[1]), .cout(c2));
    FullAdder fa2 (.a(a[2]), .b(b[2]), .cin(c2),  .sum(sum[2]), .cout(c3));
    FullAdder fa3 (.a(a[3]), .b(b[3]), .cin(c3),  .sum(sum[3]), .cout(cout));
    
endmodule


Simulation Testbench:
module tb_RippleCarryAdder4;

    reg [3:0] a, b;
    reg cin;
    wire [3:0] sum;
    wire cout;

    RippleCarryAdder4 uut (
        .a(a),
        .b(b),
        .cin(cin),
        .sum(sum),
        .cout(cout)
    );

    initial begin
        $monitor("Time=%d: a=%b b=%b cin=%b => sum=%b cout=%b", $time, a, b, cin, sum, cout);
        
        a = 4'b0000; b = 4'b0000; cin = 0;
        #10 a = 4'b0011; b = 4'b0101; cin = 0;
        #10 a = 4'b1111; b = 4'b0001; cin = 1;
        #10 a = 4'b1010; b = 4'b1010; cin = 0;
        #10 a = 4'b1100; b = 4'b0110; cin = 1;
        #10;
    end
    
endmodule
